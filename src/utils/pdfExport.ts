
import jsPDF from 'jspdf';

interface SOPStep {
  number: number;
  title: string;
  description: string;
  details?: string[];
}

interface SOP {
  title: string;
  description?: string;
  category?: string;
  tags?: string[];
  steps?: SOPStep[];
  created_at?: string;
  generated_content?: string;
}

export const exportSOPToPDF = (sop: SOP) => {
  const doc = new jsPDF();
  let yPosition = 20;
  const pageHeight = doc.internal.pageSize.height;
  const margin = 20;
  const lineHeight = 7;

  // Helper function to add text with word wrapping
  const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
    doc.setFontSize(fontSize);
    if (isBold) {
      doc.setFont('helvetica', 'bold');
    } else {
      doc.setFont('helvetica', 'normal');
    }

    const textLines = doc.splitTextToSize(text, doc.internal.pageSize.width - 2 * margin);
    
    // Check if we need a new page
    if (yPosition + (textLines.length * lineHeight) > pageHeight - margin) {
      doc.addPage();
      yPosition = margin;
    }

    textLines.forEach((line: string) => {
      doc.text(line, margin, yPosition);
      yPosition += lineHeight;
    });
    
    yPosition += 3; // Extra spacing after text blocks
  };

  // Title
  addText(sop.title, 18, true);
  yPosition += 5;

  // Description
  if (sop.description) {
    addText('Description:', 14, true);
    addText(sop.description, 12);
    yPosition += 3;
  }

  // Category
  if (sop.category) {
    addText(`Category: ${sop.category}`, 12, true);
    yPosition += 3;
  }

  // Tags
  if (sop.tags && sop.tags.length > 0) {
    addText(`Tags: ${sop.tags.join(', ')}`, 12, true);
    yPosition += 3;
  }

  // Creation date
  if (sop.created_at) {
    addText(`Created: ${new Date(sop.created_at).toLocaleDateString()}`, 12);
    yPosition += 5;
  }

  // Steps (if structured)
  if (sop.steps && sop.steps.length > 0) {
    addText('Steps:', 16, true);
    yPosition += 3;

    sop.steps.forEach((step) => {
      addText(`${step.number}. ${step.title}`, 14, true);
      addText(step.description, 12);
      
      if (step.details && step.details.length > 0) {
        step.details.forEach((detail) => {
          addText(`• ${detail}`, 11);
        });
      }
      yPosition += 3;
    });
  } else if (sop.generated_content) {
    // Fallback to generated content
    addText('Content:', 16, true);
    yPosition += 3;
    
    // Parse and format the generated content
    const lines = sop.generated_content.split('\n');
    lines.forEach((line) => {
      if (line.trim()) {
        if (line.startsWith('## Step')) {
          addText(line.replace('## ', ''), 14, true);
        } else if (line.startsWith('• ')) {
          addText(line, 11);
        } else {
          addText(line, 12);
        }
      } else {
        yPosition += 2; // Add space for empty lines
      }
    });
  }

  // Footer
  yPosition = pageHeight - 15;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text('Generated by AI SOP Generator', margin, yPosition);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, doc.internal.pageSize.width - margin - 50, yPosition);

  // Save the PDF
  const filename = `${sop.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`;
  doc.save(filename);
};
